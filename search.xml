<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>五指cms代码审计</title>
      <link href="/posts/e754e93d/"/>
      <url>/posts/e754e93d/</url>
      
        <content type="html"><![CDATA[        <h1 id="01-五指CMS">          <a href="#01-五指CMS" class="heading-link"><i class="fas fa-link"></i></a><a href="#01-五指CMS" class="headerlink" title="01-五指CMS"></a>01-五指CMS</h1>              <h1 id="01-看文档">          <a href="#01-看文档" class="heading-link"><i class="fas fa-link"></i></a><a href="#01-看文档" class="headerlink" title="01-看文档"></a>01-看文档</h1>      <p><img src="/posts/e754e93d/image-20231220144430-xqf5j99.png" alt="image">​</p><p><img src="/posts/e754e93d/image-20231220144447-lwxjaht.png" alt="image">​</p><p>目的：了解基本架构，看主要目录</p><p>‍</p>        <h1 id="02-审计">          <a href="#02-审计" class="heading-link"><i class="fas fa-link"></i></a><a href="#02-审计" class="headerlink" title="02-审计"></a>02-审计</h1>              <h2 id="2-1-路由分析">          <a href="#2-1-路由分析" class="heading-link"><i class="fas fa-link"></i></a><a href="#2-1-路由分析" class="headerlink" title="2.1-路由分析"></a>2.1-路由分析</h2>      <p>发现存在入口文件，那么直接从入口文件入手。（那些定义环境什么的基本没用，因为基本不存在可控参数），直接看定义函数<code>load_class()</code>​</p><p><img src="/posts/e754e93d/image-20231220144702-b8scm2d.png" alt="image">​</p><p>load_class()，加载类函数，根据注释以及大概浏览，发现没有可控参数的传入，直接进入入口加载的文件。根据传入参数application,可以定位到其加载了<strong>application.class.php</strong>文件</p><p><img src="/posts/e754e93d/image-20231220144852-z6kx6tv.png" alt="image">​</p><p><em><strong>application.class.php文件</strong></em>：</p><p><img src="/posts/e754e93d/image-20231220145033-3q9pv59.png" alt="image">​</p><p>该文件是路由文件，指明了M-模块名，F-文件名，V-方法名</p><p><img src="/posts/e754e93d/image-20231220145137-l1l6vgy.png" alt="image">​</p><p>看一下setconfig()函数，说是设置路由，通过大概浏览，发现是对定义的路由变量，进行赋值以及过滤，但不是源输入口，所以看下面其他函数</p><p><img src="/posts/e754e93d/image-20231220145408-y4r3j8w.png" alt="image">​</p><p>下面有一个run()函数，对应着入口文件index.php中调用的函数，是理清路由的重点。</p><p><img src="/posts/e754e93d/image-20231220145549-7hqnfs6.png" alt="image">​</p><p>一开始调用了load_file()函数且默认传入参数为空，定位到函数位置，分析作用：</p><p><img src="/posts/e754e93d/image-20231220145908-lx0ggr0.png" alt="image">​</p><p>第一个判断，可以基本猜测与管理员有关。通过判断参数_su，来控制admin目录的设置。</p><p><img src="/posts/e754e93d/image-20231220150715-j8azra6.png" alt="image">​</p><p><img src="/posts/e754e93d/image-20231220150807-j5hg6y5.png" alt="image">​</p><p><img src="/posts/e754e93d/image-20231220150916-wn8u6uq.png" alt="image">​</p><p>找到函数返回值：返回对应类文件。</p><p>可以分析出基本路由：入口文件index.php加载application.class.php文件中的类，执行其中的run()方法，方法中通过调用load_file()方法，浏览代码内容后，发现通过传入M、F、V来控制传入对应的文件，进行处理，即MVC中Controller部分。</p><p>Model路径：<code>wuzhicms/coreframe/app/$app(M) . $_admin_dir(默认/admin)/$filename(F).php</code>​</p><p>因为存在<code>_su</code>​参数，来控制访问管理员目录，所以可以得出管理页面访问：<code>index.php?_su=wuzhicms&amp;m=core&amp;f=index</code>​</p><p>‍</p>        <h2 id="开始审计代码">          <a href="#开始审计代码" class="heading-link"><i class="fas fa-link"></i></a><a href="#开始审计代码" class="headerlink" title="开始审计代码"></a>开始审计代码</h2>              <h3 id="1-CSRF">          <a href="#1-CSRF" class="heading-link"><i class="fas fa-link"></i></a><a href="#1-CSRF" class="headerlink" title="1-CSRF"></a>1-CSRF</h3>      <p><img src="/posts/e754e93d/image-20231223162218-ynj7av7.png" alt="image">​</p><p>找到对应路由方法，发现只对提交的参数进行判断，并未对身份进行验证，所以存在CSRF实现任意用户添加<img src="/posts/e754e93d/image-20231223162319-id7wh6o.png" alt="image">​</p><p><img src="/posts/e754e93d/image-20231223162334-6jcdsep.png" alt="image">​</p><p>依照这个思路，可以大胆猜测对方在其他存在身份验证的地方也可能没有进行身份验证。</p><p>‍</p><p>‍</p>        <h3 id="2-目录遍历">          <a href="#2-目录遍历" class="heading-link"><i class="fas fa-link"></i></a><a href="#2-目录遍历" class="headerlink" title="2-目录遍历"></a>2-目录遍历</h3>      <p>搜索敏感函数</p><p>全局搜索<code>glob(</code>​，查找是否存在glob()函数的调用。</p><p><img src="/posts/e754e93d/image-20231223190422-18qewgu.png" alt="image">​</p><p>上面代码就是调用了glob()函数，匹配目录，同时使用<code>template</code>​​进行模板渲染，即存在结果返回<strong>前段显示</strong>。</p><p>寻找是否参数可控，函数方法乍一看没有传参，实际上这里是类方法，调用了<code>$this-&gt;dir</code>​,而<code>$this-&gt;dir</code>​在__construct()函数中可控，并且进行了简单过滤</p><p><img src="/posts/e754e93d/image-20231223190727-4xor7p0.png" alt="image">​</p><p>怎么触发呢？考虑到是模板，那么访问指定页面传入参数，就会自动触发类中的构造函数。</p><p><img src="/posts/e754e93d/image-20231223191005-ypilrh2.png" alt="image">​</p><p>根据路由，构造Payload：<code>index.php?m=template&amp;_su=wuzhicms&amp;f=index&amp;v=listing&amp;dir=.....///.....///.....///.....///.....///.....///</code>​</p><p><img src="/posts/e754e93d/image-20231223191655-jbvdov2.png" alt="image">​</p><ol><li>全局搜索敏感危险函数</li><li>寻找存在变量可控的相关函数</li><li>追溯整个调用链，看是否能够结果回显</li></ol><p>‍</p>        <h3 id="3-任意文件删除">          <a href="#3-任意文件删除" class="heading-link"><i class="fas fa-link"></i></a><a href="#3-任意文件删除" class="headerlink" title="3-任意文件删除"></a>3-任意文件删除</h3>      <p>全局搜索unlink()函数，该函数是PHP中自带的文件删除函数。以下面为例，找到一个自定义方法中调用了unlink()函数，并且未进行过滤操作</p><p><img src="/posts/e754e93d/image-20231223212053-nq196p8.png" alt="image">，此时的思路就是去找哪里调用了这个方法，以及参数是否可控</p><p>其一：path是从数据库中提取的，我们无法控制，所以不能造成任意文件删除</p><p><img src="/posts/e754e93d/image-20231223212208-jgsyy6t.png" alt="image">​</p><p>其二：这里的<code>$path</code>​是由<code>$url</code>​控制，而<code>$url</code>​是可控的传入参数，里面调用了remove_xss()函数，过滤xss代码，</p><p><img src="/posts/e754e93d/image-20231223212303-604dvbt.png" alt="image">​</p><p><img src="/posts/e754e93d/image-20231223212346-ctf40cd.png" alt="image">​</p><p><code>remove_xss()</code>​过滤代码中未对<code>. /</code>​进行过滤，这就意味着可以进行目录遍历，然后实现文件删除</p><p><img src="/posts/e754e93d/image-20231223212514-5dhr4sl.png" alt="image">​</p><p>分析路由：需要进入else中语句，所以不能传入<code>$id</code>​，直接传入<code>$url</code>​</p><p>Payload：<code>http://www.testwuzhi.com/index.php?m=attachment&amp;f=index&amp;v=del&amp;url=../1.txt&amp;_su=wuzhicms</code>​</p><p><img src="/posts/e754e93d/image-20231223212754-pc1g4v0.png" alt="image">​</p><p><img src="/posts/e754e93d/image-20231223212614-dka9euf.png" alt="image">​</p><p>当前目录：</p><p><img src="/posts/e754e93d/image-20231223213025-v17n3zd.png" alt="image">​</p><p>也可以通过对应文件找到其页面中的功能点，从而利用抓包修改</p><p><img src="/posts/e754e93d/image-20231223213447-olmvf9q.png" alt="image">​</p><p><img src="/posts/e754e93d/image-20231223213459-k9aaany.png" alt="image">​</p><p>‍</p>        <h3 id="4-sql注入">          <a href="#4-sql注入" class="heading-link"><i class="fas fa-link"></i></a><a href="#4-sql注入" class="headerlink" title="4-sql注入"></a>4-sql注入</h3>              <h4 id="删除用户交互">          <a href="#删除用户交互" class="heading-link"><i class="fas fa-link"></i></a><a href="#删除用户交互" class="headerlink" title="删除用户交互"></a>删除用户交互</h4>              <h5 id="删除会员组">          <a href="#删除会员组" class="heading-link"><i class="fas fa-link"></i></a><a href="#删除会员组" class="headerlink" title="删除会员组"></a>删除会员组</h5>              <h6 id="分析执行链">          <a href="#分析执行链" class="heading-link"><i class="fas fa-link"></i></a><a href="#分析执行链" class="headerlink" title="分析执行链"></a>分析执行链</h6>      <p>根据路由找到对应文件</p><p><img src="/posts/e754e93d/image-20231224135925-e279zpn.png" alt="image">​</p><p><img src="/posts/e754e93d/image-20231224140026-tcx2ub4.png" alt="image">​</p><p>找到数据库交互位置，且参数可控，开始追溯整个执行链。</p><p>通过<code>db-&gt;delete()</code>​追溯到<strong>db.class.php</strong>文件中的<code>delete()</code>​函数，接着通过<code>master_db-&gt;delete()</code>​追溯到<strong>mysqli.class.php</strong>文件中的<code>delete()</code>​函数。此时发现函数中的sql语句直接拼接，不存在预处理什么的。再追溯到本文件中定义的<code>query()</code>​函数的定义（因为不是直接使用mysql语句，所以只能是自定义的语句）</p><blockquote><p>关于执行过程中，例如<code>array2sql()</code>​函数，暂时不用去分析其作用，如果后面执行链无法输出结果，前面怎么分析都是浪费时间</p></blockquote><p><img src="/posts/e754e93d/image-20231224140157-2dqikr0.png" alt="image">​</p><p><img src="/posts/e754e93d/image-20231224140306-3dsflek.png" alt="image">​</p><p>分析query()执行函数，里面调用了halt()函数，追溯其作用发现halt()函数是输出结果，依据if判断，可以知道如果sql查询失败了会执行halt，也就是报错信息输出，利用了mysqli_error()可以用于报错注入。</p><p>也就是说只要调用了自定义的query()函数，就可能存在报错注入的风险。</p><p><img src="/posts/e754e93d/image-20231224140725-snz0cuh.png" alt="image">​</p><p><img src="/posts/e754e93d/image-20231224140904-kr6hj5f.png" alt="image">​</p><p><img src="/posts/e754e93d/image-20231224140917-bp5v9hm.png" alt="image">​</p><p>‍</p><p>分析可能存在报错漏洞，整理执行链：<strong>member&#x2F;admin&#x2F;group.php</strong>​<code>中的del()函数</code>​ <code>**=&gt;**</code> ​<strong>db.class.php</strong>​<code>文件中array2sql()+master_db-&gt;delete(函数)</code>​ <code>**=&gt;**</code> ​<strong>mysqli.class.php</strong>​<code>文件中的delete()函数</code>​ <code>**=&gt;**</code> ​<code>query()函数</code>​。分析认为是query()会导致报错注入。</p><p>‍</p>        <h6 id="分析构造payload">          <a href="#分析构造payload" class="heading-link"><i class="fas fa-link"></i></a><a href="#分析构造payload" class="headerlink" title="分析构造payload"></a>分析构造payload</h6>      <p>query()函数，想要报错，只需要传入的<code>$sql</code>​语句可以报错即可</p><p><img src="/posts/e754e93d/image-20231224141948-lbn5eva.png" alt="image">​</p><p>分析delete()函数，参数<code>$where</code>​是可控的，追溯到<code>$where</code>​变量</p><p><img src="/posts/e754e93d/image-20231224142042-zz8ldwh.png" alt="image">​</p><p>db.class.php文件中delete()函数，<code>$where</code>​变量可控但是会进行array2sql()函数，现在分析array2sql()函数</p><p><img src="/posts/e754e93d/image-20231224142129-w1kdbu7.png" alt="image">​</p><p>注释写了是数组转化为sql格式，但是中间有一段str_replace()函数的简单过滤。先写出报错注入的语句，然后根据过滤进行修改</p><p><code>AND updatexml(rand(),concat(0x3a,database(),0x3a),rand()) --+</code>​</p><p><img src="/posts/e754e93d/image-20231224142222-pw0326f.png" alt="image">​</p><p>通过分析其过滤了空格和’替空，可以利用+号代替空格。其次<code>$sql</code>​语句的拼接是直接拼接传入的$val，所以不需要其他绕过了</p><p>所以payload：<code>AND+updatexml(rand(),concat(0x3a,database(),0x3a),rand())+--+</code>​</p><p>现在回到入口文件处，分析<code>$where</code>​的传入方式：判断传入的groupid参数是否是数组，这里发现不是的话，会进入else语句，其中的调用<code>db-&gt;delete()</code>​,是直接传入我们输入的参数。所以可以实现报错注入</p><p><img src="/posts/e754e93d/image-20231224143255-8g96vny.png" alt="image">​</p><p>最终Payload：<code>+AND+updatexml(rand(),concat(0x3a,database(),0x3a),rand())+--+</code>​</p><p><img src="/posts/e754e93d/image-20231224143510-9w8z0md.png" alt="image">​</p><p>‍</p>        <h4 id="导出excel">          <a href="#导出excel" class="heading-link"><i class="fas fa-link"></i></a><a href="#导出excel" class="headerlink" title="导出excel"></a>导出excel</h4>      <p>在coreframe&#x2F;app&#x2F;pay&#x2F;admin&#x2F;index.php文件中，入口代码30-43行：</p><p><img src="/posts/e754e93d/wps1-20231225143658-lt97i15.jpg">​</p><p>通过status参数传入<code>$where</code>​变量上<code>$status</code>​变量，该变量未经过详细的过滤，可以作为sql注入的入侵点。接着通过if条件判断，将<code>$status</code>​参数提交的值拼接在</p><p>在第88行，通过调用coreframe&#x2F;app&#x2F;core&#x2F;libs&#x2F;class&#x2F;db.class.php文件中的get_list()函数，传入<code>$where</code>​变量</p><p><img src="/posts/e754e93d/wps2-20231225143658-ozowkbz.jpg">​</p><p>因为传入的<code>$where</code>​为非数组变量，所以进过简单过滤直接传入到coreframe&#x2F;app&#x2F;core&#x2F;libs&#x2F;class&#x2F;mysqli.class.php文件中的get_list()函数</p><p><img src="/posts/e754e93d/wps3-20231225143658-2okxsc2.jpg">​</p><p>在coreframe&#x2F;app&#x2F;core&#x2F;libs&#x2F;class&#x2F;mysqli.class.php文件中的get_list()函数里，传入的<code>$where</code>​变量，直接拼接为新的<code>$where</code>​变量，并且拼接到<code>$sql</code>​语句中，利用自定义的query()函数执行sql查询</p><p><img src="/posts/e754e93d/wps4-20231225143658-f2xjypo.jpg">​</p><p>自定义的query()sql查询语句，当查询错误时，会触发halt()函数，在237行该函数中调用了mysqli_error(),导致了报错注入</p><p><img src="/posts/e754e93d/wps5-20231225143658-9qaj9zx.jpg">​</p><p><img src="/posts/e754e93d/wps6-20231225143658-lwvor5d.jpg">​</p><p>‍</p>        <h3 id="任意文件写入">          <a href="#任意文件写入" class="heading-link"><i class="fas fa-link"></i></a><a href="#任意文件写入" class="headerlink" title="任意文件写入"></a>任意文件写入</h3>      <p>file_put_contents()</p><p>fwrite()</p><p>这里主要用到的是敏感函数回溯。通过seay源代码分析，先找一些主要是可以接收变量的，然后找存在注释的。</p><p><img src="/posts/e754e93d/image-20231224151500-lc0t9wn.png" alt="image">​</p><p><img src="/posts/e754e93d/image-20231224150642-tdk2sr7.png" alt="image">​</p><p>这里找到一对，写入缓存和读取缓存内容，关键是读取缓存内容中使用了<code>include</code>​包含</p><p>追溯函数的调用，全局搜索函数，发现有一处函数调用了set_cache，同时参数可控，并且该函数中同时调用了get_cache()</p><p>​<img src="/posts/e754e93d/image-20231224155546-t15v4ga.png" alt="image">​​</p><p>直接根据路由分析出Payload：<code>https://www.testwuzhi.com/index.php?m=attachment&amp;f=index&amp;v=ueditor&amp;_su=wuzhicms&amp;submit=XXX&amp;setting=&lt;?php%20phpinfo();?&gt;</code>​</p><p>可以看到ueditor函数中，如果没有submit写入，就会调用get_cache函数，而这个函数式用来读取缓存内容的。<img src="/posts/e754e93d/image-20231221161236-34phrcw.png" alt="image">​</p><p>‍</p>        <h1 id="思考">          <a href="#思考" class="heading-link"><i class="fas fa-link"></i></a><a href="#思考" class="headerlink" title="思考"></a>思考</h1>      <blockquote><p>在sql注入处，分析出因为query()函数的定义，导致的报错注入，那么是不是涉及到调用query()函数的都存在报错注入?</p></blockquote><p>‍</p><p>‍</p>]]></content>
      
      
      <categories>
          
          <category> 代码审计 </category>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码审计 </tag>
            
            <tag> Web安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Test Article</title>
      <link href="/posts/7c87bbf6/"/>
      <url>/posts/7c87bbf6/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> test </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
